import Head from "next/head";
import Image from "next/image";
import { Inter } from "@next/font/google";
import Link from "next/link";
import React, { useEffect, useState } from "react";
import BodyComponent from "./components/BodyComponent";

const inter = Inter({ subsets: ["latin"] });

/**
 * ICountry interface
 * @interface ICountry
 * @TODO : revoir native name , currency et language
 */

export interface ICountry {
  flags: {
    svg: string;
    png: string;
  };
  name: {
    common: string;
    nativeName: {
      ara: { common: string }; // native name in arabic  ???????
    };
  };
  population: string;
  region: string;
  subregion: string;
  capital: string;
  topLevelDomain: string[];
  currencies: {
    AED: { name: string; symbol: string }; // CURRENCY ???????
  };
  languages: {
    ara: string; // language ???????
  };
  borders: string[];
}

// export const getServerSideProps = async () => {
//   const res = await fetch("https://restcountries.com/v3.1/all");
//   const data = await res.json();
//   const fixedPopulation = data.map((country: ICountry) => {
//     country.population = country.population
//       .toString()
//       .replace(/\B(?=(\d{3})+(?!\d))/g, ",");
//   });
//   return {
//     props: {
//       countries: data,
//     },
//   };
// };

export default function Home() {
  // fetching data from the api
  const [countries, setCountries] = useState<ICountry[]>([]);
  const [filteredCountries, setFilteredCountries] = useState<ICountry[]>([]);
  const [selectedRegion, setSelectedRegion] = useState<string>("");

  useEffect(() => {
    fetch("https://restcountries.com/v3.1/all")
      .then((res) => res.json())
      .then((data) => {
        const fixedPopulation = data.map((country: ICountry) => {
          country.population = country.population
            .toString()
            .replace(/\B(?=(\d{3})+(?!\d))/g, ","); // add commas to the population
          setCountries(data);
        });
      })
      .catch((err) => console.log(err));
  }, []);

  useEffect(() => {
    setFilteredCountries(countries);
  }, [countries]);

  useEffect(() => {
    setFilteredCountries(
      countries.filter((country) => country.region === selectedRegion)
    );
  }, [selectedRegion]);

  const getRegions = (countries: ICountry[]) => {
    const regionsSet = new Set<string>();
    for (const country of countries) {
      regionsSet.add(country.region);
    }
    return Array.from(regionsSet);
  };

  const [regions, setRegions] = useState<string[]>([]);
  useEffect(() => {
    setRegions(getRegions(countries));
  }, [countries]);

  const onSearch = (query: string) => {
    const queryLowerCase = query.toLowerCase();
    const result = countries.filter((element) =>
      element.name.common.toLowerCase().includes(queryLowerCase)
    );
    setFilteredCountries(result);
  };

  return (
    <>
      <Head>
        <title>Countries</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <BodyComponent
        countries={filteredCountries}
        onSearch={onSearch}
        regions={regions}
        selectedRegion={selectedRegion}
        setSelectedRegion={setSelectedRegion}
      />
    </>
  );
}
